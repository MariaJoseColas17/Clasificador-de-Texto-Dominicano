# -*- coding: utf-8 -*-
"""clasificador_texto_dominicano.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X6vYXMf6T5q7FqnizEkF31ruo-ZQKL4r
"""

import pandas as pd

data = {
    "texto": [
        # Emergencia
        "¡Se desmayó mi abuela!", "Se pinchó la goma", "Estoy grave, no puedo respirar",
        "¿Tienen emergencia médica aquí?", "Ayuda, hay un herido", "Mi tío se cayó y no se mueve",
        "La doña no está respirando bien", "Se prendió fuego en la cocina",
        "Hay un accidente en la calle", "¡Auxilio, se cortó con un cuchillo!",

        # Consulta
        "¿Dónde hay un colmado?", "¿Dónde puedo encontrar una farmacia?", "¿Hay ruta para Villa Mella?",
        "¿Dónde queda la parada del metro?", "¿A qué hora cierra el colmado?", "¿Cuál es el número de emergencia?",
        "¿Cómo llego al hospital más cercano?", "¿Dónde pido un taxi rápido?", "¿Cuál es la ruta al 27?",
        "¿Qué delivery llega más rápido?",

        # Informal
        "Loco, vamos al coro esta noche", "Voy pa’ donde el pana", "Manito, préstame algo",
        "Ey manito, vamos al teteo", "Dime a ver qué lo qué", "Klk mi pana", "Oe mi loco",
        "Loco toy en olla", "Vamos a freír unos yaniqueques", "Ta' to' chill hoy"
    ],
    "categoria": [
        "emergencia", "emergencia", "emergencia", "emergencia", "emergencia",
        "emergencia", "emergencia", "emergencia", "emergencia", "emergencia",

        "consulta", "consulta", "consulta", "consulta", "consulta",
        "consulta", "consulta", "consulta", "consulta", "consulta",

        "informal", "informal", "informal", "informal", "informal",
        "informal", "informal", "informal", "informal", "informal"
    ]
}

df = pd.DataFrame(data)
df["texto"] = df["texto"].str.lower()  # Normaliza

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split

vectorizador = TfidfVectorizer()
X = vectorizador.fit_transform(df['texto'])
y = df['categoria']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

modelo = RandomForestClassifier()
modelo.fit(X_train, y_train)

y_pred = modelo.predict(X_test)
print(classification_report(y_test, y_pred, zero_division=0))

frases_nuevas = [
    "¡Se pinchó la goma!", "¿Dónde hay un colmado?", "Loco, préstame algo",
    "Mi tío se cayó y no se mueve", "Ey, vamos al teteo esta noche", "Se prendió fuego en la cocina", "me toy haciendo pipi"
]

frases_nuevas = [f.lower() for f in frases_nuevas]
X_nuevas = vectorizador.transform(frases_nuevas)
predicciones = modelo.predict(X_nuevas)

for texto, pred in zip(frases_nuevas, predicciones):
    print(f'Texto: "{texto}" → Clasificación: "{pred}"')